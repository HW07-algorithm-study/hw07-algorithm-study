import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Baek13549 { // 숨바꼭질 3
    static int[] visit = new int[100001];
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int start = Integer.parseInt(st.nextToken());
        int target = Integer.parseInt(st.nextToken());
        Arrays.fill(visit,Integer.MAX_VALUE);
        System.out.println(bfs(start,target));
    }

    private static int bfs(int start,int target) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[] {start,0});
        visit[start] = 0;

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            if (cur[0] == target) {
                return visit[cur[0]];
            }
            if (boundCheck(cur[0]-1)) {
                if (visit[cur[0]- 1] > cur[1]+1) {
                    visit[cur[0]- 1] = cur[1]+1;
                    queue.add(new int[]{cur[0] - 1, cur[1] + 1});
                }
            }
            if (boundCheck(cur[0]+1)) {
                if (visit[cur[0]+1] > cur[1]+1) {
                    visit[cur[0]+1] = cur[1]+1;
                    queue.add(new int[]{cur[0]+1, cur[1] + 1});
                }
            }
            if (boundCheck(cur[0]*2)) {
                if (visit[cur[0]*2] > cur[1]) {
                    visit[cur[0]*2] = cur[1];
                    queue.add(new int[]{cur[0]*2, cur[1]});
                }
            }

        }
        return 0;
    }
    private static boolean boundCheck(int i) {
        if (i>=0 && i<=100000) return true;
        return false;
    }
}
