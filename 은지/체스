import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Baek1986 { // 체스
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int[][] map = new int[n][m];
        int[][] queen;
        int[][] knight;
        int[][] pawn;


        st = new StringTokenizer(br.readLine());
        int num = Integer.parseInt(st.nextToken());
        queen = new int[num][2];
        for (int j = 0; j < num; j++) {
            queen[j][0] = Integer.parseInt(st.nextToken()) - 1;
            queen[j][1] = Integer.parseInt(st.nextToken()) - 1;
        }

        st = new StringTokenizer(br.readLine());
        int num2 = Integer.parseInt(st.nextToken());
        knight = new int[num2][2];
        for (int j = 0; j < num2; j++) {
            knight[j][0] = Integer.parseInt(st.nextToken()) - 1;
            knight[j][1] = Integer.parseInt(st.nextToken()) - 1;
        }
        st = new StringTokenizer(br.readLine());
        int num3 = Integer.parseInt(st.nextToken());
        pawn = new int[num3][2];
        for (int j = 0; j < num3; j++) {
            pawn[j][0] = Integer.parseInt(st.nextToken()) - 1;
            pawn[j][1] = Integer.parseInt(st.nextToken()) - 1;
        }

        for (int i = 0; i < knight.length; i++) {
            int x = knight[i][0];
            int y = knight[i][1];
            addKnight(map, x, y);
        }
        for (int i = 0; i < pawn.length; i++) {
            int x = pawn[i][0];
            int y = pawn[i][1];
            addPawn(map, x, y);
        }
//        print(map);

        for (int i = 0; i < queen.length; i++) {
            int x = queen[i][0];
            int y = queen[i][1];
            addQueen(map, x, y);
        }
        int count = 0;
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                if(map[i][j] == 0) count++;
            }
        }
        System.out.println(count);
    }
    private static void addPawn(int[][] map, int x, int y) {
        map[x][y] = 3;
    }

    private static void addKnight(int[][] map, int x, int y) {
        map[x][y] = 2;
        int[] dx = {2, 2, -1, 1,-1,-2,1,-2};
        int[] dy = {-1, 1, 2, 2,-2,-1,-2,1};
        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && nx < map.length && ny >= 0 && ny < map[0].length) {
                if (map[nx][ny]==0) {
                    map[nx][ny] = -1;
                }
            }
        }
    }

    private static void addQueen(int[][] map, int x, int y) {
        map[x][y] = 1;
        int[] dx = {0, 0, -1, 1, -1, -1, 1, 1};
        int[] dy = {1, -1, -1, 1, 0, 1, -1, 0};

        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            while (nx >= 0 && nx < map.length && ny >= 0 && ny < map[0].length) {
                if (map[nx][ny] == 1 ||map[nx][ny] == 2 || map[nx][ny] == 3) {
                    break;
                } else {
                    map[nx][ny] = -1;
                }
                nx += dx[i];
                ny += dy[i];
            }
        }
    }
}
